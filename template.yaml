AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Great Kingdom Serverless Backend

Globals:
  Function:
    Timeout: 5
    MemorySize: 128
    Runtime: provided.al2023
    Handler: bootstrap
    Environment:
      Variables:
        GAME_TABLE_DYNAMODB: !Ref GameTableDynamoDB
        USER_DYNAMODB: !Ref UserDynamoDB
        CONNECTION_DYNAMODB: !Ref WebSocketConnectionDynamoDB
        WEBSOCKET_EVENT_QUEUE: !Ref WebSocketEventQueue
        WEB_CLIENT_ORIGIN: https://www.greatkingdom.net
        WEBSOCKET_ENDPOINT: !Sub "https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${WebSocketDevStage}"

Resources:
  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/authorizer/
      Environment:
        Variables:
          ALLOWED_RESOURCES_PREFIX: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}

  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: great-kingdom-rest
      StageName: Prod
      AlwaysDeploy: true
      Auth:
        Authorizers:
          LambdaAuthorizer:
            FunctionArn: !GetAtt AuthorizerFunction.Arn
            FunctionPayloadType: REQUEST
            Identity:
              Headers:
                - Authorization
      GatewayResponses:
        ACCESS_DENIED:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'https://www.greatkingdom.net'"
              Access-Control-Allow-Credentials: "'true'"
        UNAUTHORIZED:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'https://www.greatkingdom.net'"
              Access-Control-Allow-Credentials: "'true'"
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: "'https://www.greatkingdom.net'"
        AllowCredentials: true
        
  RestCreateGameTableFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/rest/create-table/
      Policies:
        - DynamoDBCrudPolicy: 
            TableName: !Ref GameTableDynamoDB
      Events:
        RestPOST:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /table
            Method: POST
            Auth:
              Authorizer: LambdaAuthorizer

  RestGetGameTablesFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/rest/get-tables/
      Policies:
        - DynamoDBCrudPolicy: 
            TableName: !Ref GameTableDynamoDB
      Events:
        RestGET:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /tables
            Method: GET
            Auth:
              Authorizer: LambdaAuthorizer

  RestGetUserFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/rest/get-user/
      Policies:
        - DynamoDBCrudPolicy: 
            TableName: !Ref UserDynamoDB
      Events:
        RestGET:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /user
            Method: GET
            Auth:
              Authorizer: LambdaAuthorizer

  RestSignUpFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/rest/sign-up/
      Policies:
        - DynamoDBCrudPolicy: 
            TableName: !Ref UserDynamoDB
      Events:
        RestPOST:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /sign-up
            Method: POST

  RestSignOutFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/rest/sign-out/
      Policies:
        - DynamoDBCrudPolicy: 
            TableName: !Ref UserDynamoDB
      Events:
        RestPOST:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /sign-out
            Method: POST
            Auth:
              Authorizer: LambdaAuthorizer

  RestSignInFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/rest/sign-in/
      Policies:
        - DynamoDBCrudPolicy: 
            TableName: !Ref UserDynamoDB
      Events:
        RestPOST:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /sign-in
            Method: POST

  RestRotateTokenFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/rest/rotate-token/
      Policies:
        - DynamoDBCrudPolicy: 
            TableName: !Ref UserDynamoDB
      Events:
        RestPOST:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /rotate-token
            Method: POST

  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: great-kingdom-game-websocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  WebSocketDevStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      StageName: Dev
      AutoDeploy: true

  WebSocketApiAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      Name: LambdaAuthorizer
      ApiId: !Ref WebSocketApi
      AuthorizerType: REQUEST
      AuthorizerUri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthorizerFunction.Arn}/invocations
      IdentitySource: 
        - route.request.header.Authorization

  WebSocketAuthorizerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AuthorizerFunction
      Principal: apigateway.amazonaws.com

  WebSocketConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      Target: !Sub 'integrations/${WebSocketConnectIntegration}'
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref WebSocketApiAuthorizer

  WebSocketConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketConnectFunction.Arn}/invocations'

  WebSocketConnectFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/ws/connect/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionDynamoDB
        - AmazonSQSFullAccess

  WebSocketConnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketConnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/$connect'

  WebSocketDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      Target: !Sub 'integrations/${WebSocketDisconnectIntegration}'

  WebSocketDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketDisconnectFunction.Arn}/invocations'

  WebSocketDisconnectFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/ws/disconnect/
      Policies:
        - AmazonSQSFullAccess
        - DynamoDBCrudPolicy: 
            TableName: !Ref WebSocketConnectionDynamoDB

  WebSocketDisconnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketDisconnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/$disconnect'

  WebSocketMoveRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: move
      Target: !Sub 'integrations/${WebSocketMoveIntegration}'

  WebSocketMoveIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketMoveFunction.Arn}/invocations'

  WebSocketMoveFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/ws/game-move/
      Policies:
        - AmazonSQSFullAccess
        - DynamoDBCrudPolicy: 
            TableName: !Ref WebSocketConnectionDynamoDB

  WebSocketMovePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketMoveFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/move'

  WebSocketChatRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: chat
      Target: !Sub 'integrations/${WebSocketChatIntegration}'

  WebSocketChatIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketChatFunction.Arn}/invocations'

  WebSocketChatFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/ws/chat/
      Policies:
        - AmazonSQSFullAccess
        - DynamoDBCrudPolicy: 
            TableName: !Ref WebSocketConnectionDynamoDB

  WebSocketChatPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketChatFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/chat'

  WebSocketGlobalChatRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: globalchat
      Target: !Sub 'integrations/${WebSocketGlobalChatIntegration}'

  WebSocketGlobalChatIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketGlobalChatFunction.Arn}/invocations'

  WebSocketGlobalChatFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/ws/global-chat/
      Policies:
        - DynamoDBCrudPolicy: 
            TableName: !Ref WebSocketConnectionDynamoDB
        - AmazonAPIGatewayInvokeFullAccess
        # - Statement:
        #     - Effect: Allow
        #       Action:
        #         - "execute-api:ManageConnections"
        #       Resource:
        #         - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"

  WebSocketGlobalChatPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketGlobalChatFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/globalchat'

  WebSocketPingRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: ping
      Target: !Sub 'integrations/${WebSocketPingIntegration}'

  WebSocketPingIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketPingFunction.Arn}/invocations'

  WebSocketPingFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/ws/ping/
      Policies:
        - DynamoDBCrudPolicy: 
            TableName: !Ref WebSocketConnectionDynamoDB
        - AmazonAPIGatewayInvokeFullAccess
        # - Statement:
        #     - Effect: Allow
        #       Action:
        #         - "execute-api:ManageConnections"
        #       Resource:
        #         - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"

  WebSocketPingPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketPingFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/ping'

  WebSocketSlotRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: slot
      Target: !Sub 'integrations/${WebSocketSlotIntegration}'

  WebSocketSlotIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketSlotFunction.Arn}/invocations'

  WebSocketSlotFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/ws/game-slot/
      Policies:
        - AmazonSQSFullAccess
        - DynamoDBCrudPolicy: 
            TableName: !Ref WebSocketConnectionDynamoDB
        - AmazonAPIGatewayInvokeFullAccess
        # - Statement:
        #     - Effect: Allow
        #       Action:
        #         - "execute-api:ManageConnections"
        #       Resource:
        #         - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"

  WebSocketSlotPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketSlotFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/slot'

  WebSocketEventQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: WebSocketEventQueue.fifo
      FifoQueue: true
      ContentBasedDeduplication: true
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 1

  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: DeadLetterQueue.fifo
      FifoQueue: true

  WebSocketEventHandlerFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/sqs/
      Policies:
        - AWSLambdaSQSQueueExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionDynamoDB
        - DynamoDBCrudPolicy:
            TableName: !Ref GameTableDynamoDB
        - DynamoDBCrudPolicy:
            TableName: !Ref UserDynamoDB
        - AmazonAPIGatewayInvokeFullAccess
        # - Statement:
        #     - Effect: Allow
        #       Action:
        #         - "execute-api:ManageConnections"
        #       Resource:
        #         - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"
      Events:
        WebSocketEventSQS:
          Type: SQS
          Properties:
            Queue: !GetAtt WebSocketEventQueue.Arn

  WebSocketConnectionDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: ConnectionId
          AttributeType: "S"
        - AttributeName: GameSessionId
          AttributeType: S
      KeySchema:
        - AttributeName: ConnectionId
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - IndexName: globalchat
          KeySchema:
            - AttributeName: GameSessionId
              KeyType: HASH
            - AttributeName: ConnectionId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  GameTableDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: GameTableId
          AttributeType: "S"
      KeySchema:
        - AttributeName: GameTableId
          KeyType: "HASH"

  UserDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: "S"
      KeySchema:
        - AttributeName: UserId
          KeyType: "HASH"

# Outputs:
#   api:
#     Value: !GetAtt WebSocketApi.ApiEndpoint
