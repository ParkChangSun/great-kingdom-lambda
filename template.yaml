AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Great Kingdom Serverless Backend

Globals:
  Function:
    Timeout: 5
    MemorySize: 128
    Runtime: provided.al2023
    Handler: bootstrap
    Architectures:
      - x86_64

Resources:
  SimpleWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: SimpleWebSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  WebSocketDevDeploy:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - WebSocketConnectRoute
      - WebSocketDisconnectRoute
    Properties:
      ApiId: !Ref SimpleWebSocket

  WebSocketDevStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref SimpleWebSocket
      DeploymentId: !Ref WebSocketDevDeploy
      StageName: Dev
      DefaultRouteSettings:
        DetailedMetricsEnabled: true
        LoggingLevel: INFO
        DataTraceEnabled: false
        ThrottlingBurstLimit: 10
        ThrottlingRateLimit: 10

  WebSocketConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleWebSocket
      RouteKey: $connect
      Target: !Sub 'integrations/${WebSocketConnectIntegration}'

  WebSocketConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleWebSocket
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketConnectFunction.Arn}/invocations'

  WebSocketConnectFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/ws-connect/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionDynamoDB
        - AmazonSQSFullAccess
      Environment:
        Variables:
          CONNECTION_DYNAMODB: !Ref WebSocketConnectionDynamoDB
          POST_MESSAGE_QUEUE: !Ref WebSocketPostMessageQueue

  WebSocketConnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketConnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleWebSocket}/*/$connect'

  WebSocketDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleWebSocket
      RouteKey: $disconnect
      Target: !Sub 'integrations/${WebSocketDisconnectIntegration}'

  WebSocketDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleWebSocket
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketDisconnectFunction.Arn}/invocations'

  WebSocketDisconnectFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/ws-disconnect/
      Policies:
        - AmazonSQSFullAccess
        - DynamoDBCrudPolicy: 
            TableName: !Ref WebSocketConnectionDynamoDB
      Environment:
        Variables:
          CONNECTION_DYNAMODB: !Ref WebSocketConnectionDynamoDB
          POST_MESSAGE_QUEUE: !Ref WebSocketPostMessageQueue

  WebSocketDisconnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketDisconnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleWebSocket}/*/$disconnect'

  WebSocketPostMessageQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: WebSocketPostMessageQueue.fifo
      FifoQueue: true
      ContentBasedDeduplication: true

  WebSocketPostMessageFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/send-msg/
      Policies:
        - AWSLambdaSQSQueueExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionDynamoDB
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleWebSocket}/*"
      Environment:
        Variables:
          API_ENDPOINT: !Sub "https://${SimpleWebSocket}.execute-api.${AWS::Region}.amazonaws.com/${WebSocketDevStage}"
          CONNECTION_DYNAMODB: !Ref WebSocketConnectionDynamoDB
          POST_MESSAGE_QUEUE: !Ref WebSocketPostMessageQueue
      Events:
        WebSocketPostSQS:
          Type: SQS
          Properties:
            Queue: !GetAtt WebSocketPostMessageQueue.Arn

  GameMoveFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/game-move/
      Policies:
        - DynamoDBCrudPolicy: 
            TableName: !Ref WebSocketConnectionDynamoDB
      Environment:
        Variables:
          STATEDYNAMODB: !Ref WebSocketConnectionDynamoDB
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /move
            Method: GET

  WebSocketConnectionDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: ConnectionId
          AttributeType: "S"
        - AttributeName: GameSessionId
          AttributeType: "S"
      KeySchema:
        - AttributeName: ConnectionId
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - IndexName: ByGameSessionId
          KeySchema:
            - AttributeName: GameSessionId
              KeyType: "HASH"
          Projection: 
            NonKeyAttributes: 
              - UserId
            ProjectionType: INCLUDE
      BillingMode: PAY_PER_REQUEST

# Outputs:
#   api:
#     Value: !GetAtt SimpleWebSocket.ApiEndpoint
