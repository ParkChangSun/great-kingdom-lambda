AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-app
  
  Sample SAM Template for sam-app

Globals:
  Function:
    Timeout: 5
    MemorySize: 128
    Runtime: provided.al2023
    Handler: bootstrap
    Architectures:
      - x86_64

Resources:
  SimpleWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: SimpleWebSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  WebSocketDevDeploy:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - WebSocketConnectRoute
    Properties:
      ApiId: !Ref SimpleWebSocket

  WebSocketDevStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref SimpleWebSocket
      DeploymentId: !Ref WebSocketDevDeploy
      StageName: Dev

  WebSocketConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleWebSocket
      RouteKey: $connect
      Target: !Sub 'integrations/${WebSocketConnectIntegration}'

  WebSocketConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleWebSocket
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketConnectFunction.Arn}/invocations'

  WebSocketConnectFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/my-ws/
      Policies:
        - DynamoDBCrudPolicy: 
            TableName: !Ref StateDynamoDB
        - AmazonSQSFullAccess
      Environment:
        Variables:
          STATEDYNAMODB: !Ref StateDynamoDB

  WebSocketConnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketConnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleWebSocket}/*/$connect'

  WebSocketPostMessageFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/send-msg/
      Policies:
        - AWSLambdaSQSQueueExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleWebSocket}/*"

  WebSocketPostMessageQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: WebSocketPostMessageQueue.fifo
      FifoQueue: true
      ContentBasedDeduplication: true

  WebSocketPostMessageEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt WebSocketPostMessageQueue.Arn
      FunctionName: !Ref WebSocketPostMessageFunction



  WebSocketPostMessageQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref WebSocketPostMessageQueue
      PolicyDocument:
        Id: MyQueuePolicy
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
            Action:
              - lambda:CreateEventSourceMapping
              - lambda:ListEventSourceMappings
              - lambda:ListFunctions
            Resource:
              - !GetAtt WebSocketPostMessageFunction



  # DisconnectRoute:
  #   Type: AWS::ApiGatewayV2::Route
  #   Properties:
  #     ApiId: !Ref SimpleChatWebSocket
  #     RouteKey: $disconnect
  #     Target: !Sub 'integrations/${DisconnectIntegration}'

  # DisconnectIntegration:
  #   Type: AWS::ApiGatewayV2::Integration
  #   Properties:
  #     ApiId: !Ref SimpleChatWebSocket
  #     IntegrationType: AWS_PROXY
  #     IntegrationUri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DisconnectFunction.Arn}/invocations'

  # DisconnectFunction:
  #   Type: AWS::Serverless::Function
  #   Metadata:
  #     BuildMethod: go1.x
  #   Properties:
  #     CodeUri: handlers/my-dis/
  #     Policies:
  #       - DynamoDBCrudPolicy: 
  #           TableName: !Ref StateDynamoDB
  #     Environment:
  #       Variables:
  #         STATEDYNAMODB: !Ref StateDynamoDB

  # DisconnectPermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     Action: lambda:InvokeFunction
  #     FunctionName: !Ref DisconnectFunction
  #     Principal: apigateway.amazonaws.com

  GameMoveFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/game-move/
      Policies:
        - DynamoDBCrudPolicy: 
            TableName: !Ref StateDynamoDB
      Environment:
        Variables:
          STATEDYNAMODB: !Ref StateDynamoDB
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /move
            Method: GET

  StateDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

# Outputs:
