AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Great Kingdom Serverless Backend

Parameters:
  Environment:
    Type: String
    AllowedValues:
      - dev
      - prod
    Default: dev

  JWTSigningKey:
    Type: String
    # NoEcho: true

  DiscordWebhook:
    Type: String
    # NoEcho: true

Globals:
  Function:
    Timeout: 5
    MemorySize: 128
    Runtime: provided.al2023
    Handler: bootstrap
    CodeUri: .
    Environment:
      Variables:
        GAME_TABLE_DYNAMODB: !Ref GameTableDynamoDB
        USER_DYNAMODB: !Ref UserDynamoDB
        CONNECTION_DYNAMODB: !Ref WebSocketConnectionDynamoDB
        GAME_TABLE_EVENT_QUEUE: !Ref GameTableEventQueue
        CLIENT_ORIGIN: https://www.greatkingdom.net
        WEBSOCKET_ENDPOINT: !Sub "https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${WebSocketApiProdStage}"
        JWT_SIGNING_KEY: !Ref JWTSigningKey
        DISCORD_WEBHOOK: !Ref DiscordWebhook

Resources:
  RestAuthorizerFunc:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile

  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: great-kingdom-rest
      StageName: prod
      AlwaysDeploy: true
      Auth:
        Authorizers:
          LambdaAuthorizer:
            FunctionArn: !GetAtt RestAuthorizerFunc.Arn
            FunctionPayloadType: REQUEST
            Identity:
              Headers:
                - Authorization
      GatewayResponses:
        ACCESS_DENIED:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'https://www.greatkingdom.net'"
              Access-Control-Allow-Credentials: "'true'"
        UNAUTHORIZED:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'https://www.greatkingdom.net'"
              Access-Control-Allow-Credentials: "'true'"
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: "'https://www.greatkingdom.net'"
        AllowCredentials: true
        
  CreateGameTableFunc:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Policies:
        - DynamoDBCrudPolicy: 
            TableName: !Ref GameTableDynamoDB
      Events:
        RestPOST:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /table
            Method: POST
            Auth:
              Authorizer: LambdaAuthorizer

  GetGameTablesFunc:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Policies:
        - DynamoDBCrudPolicy: 
            TableName: !Ref GameTableDynamoDB
      Events:
        RestGET:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /table
            Method: GET
            Auth:
              Authorizer: LambdaAuthorizer

  GetUserFunc:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Policies:
        - DynamoDBCrudPolicy: 
            TableName: !Ref UserDynamoDB
      Events:
        RestGET:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /user
            Method: GET
            Auth:
              Authorizer: LambdaAuthorizer

  SignUpFunc:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Policies:
        - DynamoDBCrudPolicy: 
            TableName: !Ref UserDynamoDB
      Events:
        RestPOST:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /sign-up
            Method: POST

  SignOutFunc:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Policies:
        - DynamoDBCrudPolicy: 
            TableName: !Ref UserDynamoDB
      Events:
        RestPOST:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /sign-out
            Method: POST
            Auth:
              Authorizer: LambdaAuthorizer

  SignInFunc:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Policies:
        - DynamoDBCrudPolicy: 
            TableName: !Ref UserDynamoDB
      Events:
        RestPOST:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /sign-in
            Method: POST

  RotateTokenFunc:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Policies:
        - DynamoDBCrudPolicy: 
            TableName: !Ref UserDynamoDB
      Events:
        RestPOST:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /rotate-token
            Method: POST

  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: great-kingdom-game-websocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  WebSocketApiProdStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      StageName: prod
      AutoDeploy: true

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      Target: !Sub 'integrations/${ConnectIntegration}'

  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectFunc.Arn}/invocations'

  ConnectFunc:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionDynamoDB
        - AmazonSQSFullAccess

  ConnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ConnectFunc
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/$connect'

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      Target: !Sub 'integrations/${DisconnectIntegration}'

  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DisconnectFunc.Arn}/invocations'

  DisconnectFunc:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Policies:
        - AmazonSQSFullAccess
        - DynamoDBCrudPolicy: 
            TableName: !Ref WebSocketConnectionDynamoDB

  DisconnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DisconnectFunc
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/$disconnect'

  AuthRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: auth
      Target: !Sub 'integrations/${AuthIntegration}'

  AuthIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthFunc.Arn}/invocations'

  AuthFunc:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Policies:
        - AmazonSQSFullAccess
        - AmazonAPIGatewayInvokeFullAccess
        - DynamoDBCrudPolicy: 
            TableName: !Ref WebSocketConnectionDynamoDB

  AuthPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AuthFunc
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/auth'

  TableRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: table
      Target: !Sub 'integrations/${TableIntegration}'

  TableIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TableFunc.Arn}/invocations'

  TableFunc:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Policies:
        - AmazonSQSFullAccess
        - DynamoDBCrudPolicy: 
            TableName: !Ref WebSocketConnectionDynamoDB

  TablePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref TableFunc
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/table'

  ChatRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: chat
      Target: !Sub 'integrations/${ChatIntegration}'

  ChatIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ChatFunc.Arn}/invocations'

  ChatFunc:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Policies:
        - AmazonSQSFullAccess
        - DynamoDBCrudPolicy: 
            TableName: !Ref WebSocketConnectionDynamoDB

  ChatPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ChatFunc
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/chat'

  GlobalChatRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: globalchat
      Target: !Sub 'integrations/${GlobalChatIntegration}'

  GlobalChatIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GlobalChatFunc.Arn}/invocations'

  GlobalChatFunc:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Policies:
        - DynamoDBCrudPolicy: 
            TableName: !Ref WebSocketConnectionDynamoDB
        - AmazonAPIGatewayInvokeFullAccess

  GlobalChatPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GlobalChatFunc
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/globalchat'

  PingRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: ping
      Target: !Sub 'integrations/${PingIntegration}'

  PingIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PingFunc.Arn}/invocations'

  PingFunc:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Policies:
        - DynamoDBCrudPolicy: 
            TableName: !Ref WebSocketConnectionDynamoDB
        - AmazonAPIGatewayInvokeFullAccess

  PingPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref PingFunc
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/ping'

  GameTableEventQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: GameTableEventQueue.fifo
      FifoQueue: true
      ContentBasedDeduplication: true
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 1

  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: DeadLetterQueue.fifo
      FifoQueue: true

  GameTableHandlerFunc:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Policies:
        - AWSLambdaSQSQueueExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionDynamoDB
        - DynamoDBCrudPolicy:
            TableName: !Ref GameTableDynamoDB
        - DynamoDBCrudPolicy:
            TableName: !Ref UserDynamoDB
        - AmazonAPIGatewayInvokeFullAccess
      Events:
        GameTableEventQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt GameTableEventQueue.Arn

  WebSocketConnectionDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: ConnectionId
          AttributeType: "S"
        - AttributeName: GameTableId
          AttributeType: S
      KeySchema:
        - AttributeName: ConnectionId
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - IndexName: globalchat
          KeySchema:
            - AttributeName: GameTableId
              KeyType: HASH
            - AttributeName: ConnectionId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  GameTableDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: GameTableId
          AttributeType: "S"
      KeySchema:
        - AttributeName: GameTableId
          KeyType: "HASH"

  UserDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: "S"
      KeySchema:
        - AttributeName: UserId
          KeyType: "HASH"

# Outputs:
#   api:
#     Value: !GetAtt WebSocketApi.ApiEndpoint
