AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Great Kingdom Serverless Backend

Globals:
  Function:
    Timeout: 5
    MemorySize: 128
    Runtime: provided.al2023
    Handler: bootstrap
    Architectures:
      - x86_64
    Environment:
      Variables:
        GAME_SESSION_DYNAMODB: !Ref GameSessionDynamoDB
        USER_DYNAMODB: !Ref UserDynamoDB
        CONNECTION_DYNAMODB: !Ref WebSocketConnectionDynamoDB
        POST_MESSAGE_QUEUE: !Ref WebSocketEventQueue
        WEB_CLIENT_ORIGIN: https://www.greatkingdom.net
        GLOBAL_CHAT_DYNAMODB: !Ref GlobalChatDynamoDB
        WEBSOCKET_ENDPOINT: !Sub "https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${WebSocketDevStage}"

Resources:
  GreatKingdomRestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: great-kingdom-restapi
      StageName: Prod
      Auth:
        Authorizers:
          LambdaAuthorizer:
            FunctionArn: !GetAtt AuthorizerFunction.Arn
            FunctionPayloadType: REQUEST
            Identity:
              Headers:
                - Cookie
      GatewayResponses:
        Unauthorized:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'https://www.greatkingdom.net'"
              Access-Control-Allow-Credentials: "'true'"

  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/authorizer/
      Environment:
        Variables:
          ALLOWED_RESOURCES_PREFIX: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}
        
  CreateGameSessionFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/create-session/
      Policies:
        - DynamoDBCrudPolicy: 
            TableName: !Ref GameSessionDynamoDB
      Events:
        RestPOST:
          Type: Api
          Properties:
            RestApiId: !Ref GreatKingdomRestApi
            Path: /game
            Method: POST
            Auth:
              Authorizer: LambdaAuthorizer

  GetGameSessionsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/get-sessions/
      Policies:
        - DynamoDBCrudPolicy: 
            TableName: !Ref GameSessionDynamoDB
      Events:
        RestGET:
          Type: Api
          Properties:
            RestApiId: !Ref GreatKingdomRestApi
            Path: /games
            Method: GET
            Auth:
              Authorizer: LambdaAuthorizer

  GetUserFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/get-user/
      Policies:
        - DynamoDBCrudPolicy: 
            TableName: !Ref UserDynamoDB
      Events:
        RestGET:
          Type: Api
          Properties:
            RestApiId: !Ref GreatKingdomRestApi
            Path: /user
            Method: GET
            Auth:
              Authorizer: LambdaAuthorizer

  SignUpFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/sign-up/
      Policies:
        - DynamoDBCrudPolicy: 
            TableName: !Ref UserDynamoDB
      Events:
        RestPOST:
          Type: Api
          Properties:
            RestApiId: !Ref GreatKingdomRestApi
            Path: /signup
            Method: POST

  SignInFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/sign-in/
      Policies:
        - DynamoDBCrudPolicy: 
            TableName: !Ref UserDynamoDB
      Events:
        RestPOST:
          Type: Api
          Properties:
            RestApiId: !Ref GreatKingdomRestApi
            Path: /signin
            Method: POST

  SignOutFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/sign-out/
      Policies:
        - DynamoDBCrudPolicy: 
            TableName: !Ref UserDynamoDB
      Events:
        RestPOST:
          Type: Api
          Properties:
            RestApiId: !Ref GreatKingdomRestApi
            Path: /signout
            Method: POST

  TokenRefreshFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/token-refresh/
      Policies:
        - DynamoDBCrudPolicy: 
            TableName: !Ref UserDynamoDB
      Events:
        RestPOST:
          Type: Api
          Properties:
            RestApiId: !Ref GreatKingdomRestApi
            Path: /tokenrefresh
            Method: POST

  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: great-kingdom-game-websocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  WebSocketApiAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      Name: LambdaAuthorizer
      ApiId: !Ref WebSocketApi
      AuthorizerType: REQUEST
      AuthorizerUri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthorizerFunction.Arn}/invocations
      IdentitySource: 
        - route.request.header.Cookie

  WebSocketAuthorizerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AuthorizerFunction
      Principal: apigateway.amazonaws.com

  WebSocketDevStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      StageName: Dev
      AutoDeploy: true

  WebSocketConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      Target: !Sub 'integrations/${WebSocketConnectIntegration}'
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref WebSocketApiAuthorizer

  WebSocketConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketConnectFunction.Arn}/invocations'

  WebSocketConnectFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/ws-connect/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionDynamoDB
        - DynamoDBCrudPolicy:
            TableName: !Ref GlobalChatDynamoDB
        - AmazonSQSFullAccess

  WebSocketConnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketConnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/$connect'

  WebSocketDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      Target: !Sub 'integrations/${WebSocketDisconnectIntegration}'

  WebSocketDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketDisconnectFunction.Arn}/invocations'

  WebSocketDisconnectFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/ws-disconnect/
      Policies:
        - AmazonSQSFullAccess
        - DynamoDBCrudPolicy: 
            TableName: !Ref WebSocketConnectionDynamoDB

  WebSocketDisconnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketDisconnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/$disconnect'

  WebSocketMoveRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: move
      Target: !Sub 'integrations/${WebSocketMoveIntegration}'

  WebSocketMoveIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketMoveFunction.Arn}/invocations'

  WebSocketMoveFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/ws-game-move/
      Policies:
        - AmazonSQSFullAccess
        - DynamoDBCrudPolicy: 
            TableName: !Ref WebSocketConnectionDynamoDB

  WebSocketMovePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketMoveFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/move'

  WebSocketChatRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: chat
      Target: !Sub 'integrations/${WebSocketChatIntegration}'

  WebSocketChatIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketChatFunction.Arn}/invocations'

  WebSocketChatFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/ws-chat/
      Policies:
        - AmazonSQSFullAccess
        - DynamoDBCrudPolicy: 
            TableName: !Ref WebSocketConnectionDynamoDB

  WebSocketChatPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketChatFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/chat'

  WebSocketGlobalChatRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: globalchat
      Target: !Sub 'integrations/${WebSocketGlobalChatIntegration}'

  WebSocketGlobalChatIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketGlobalChatFunction.Arn}/invocations'

  WebSocketGlobalChatFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/ws-global-chat/
      Policies:
        - DynamoDBCrudPolicy: 
            TableName: !Ref WebSocketConnectionDynamoDB
        - DynamoDBCrudPolicy: 
            TableName: !Ref GlobalChatDynamoDB
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"

  WebSocketGlobalChatPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketGlobalChatFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/globalchat'

  WebSocketPingRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: ping
      Target: !Sub 'integrations/${WebSocketPingIntegration}'

  WebSocketPingIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketPingFunction.Arn}/invocations'

  WebSocketPingFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/ws-ping/
      Policies:
        - DynamoDBCrudPolicy: 
            TableName: !Ref WebSocketConnectionDynamoDB
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"

  WebSocketPingPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketPingFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/ping'

  WebSocketEventQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: WebSocketEventQueue.fifo
      FifoQueue: true
      ContentBasedDeduplication: true
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 1

  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: DeadLetterQueue.fifo
      FifoQueue: true

  WebSocketEventHandlerFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/ws-handler/
      Policies:
        - AWSLambdaSQSQueueExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionDynamoDB
        - DynamoDBCrudPolicy:
            TableName: !Ref GameSessionDynamoDB
        - DynamoDBCrudPolicy:
            TableName: !Ref UserDynamoDB
        - DynamoDBCrudPolicy:
            TableName: !Ref GlobalChatDynamoDB
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"
      Events:
        WebSocketEventSQS:
          Type: SQS
          Properties:
            Queue: !GetAtt WebSocketEventQueue.Arn

  WebSocketConnectionDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: ConnectionId
          AttributeType: "S"
        - AttributeName: GameSessionId
          AttributeType: S
      KeySchema:
        - AttributeName: ConnectionId
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - IndexName: globalchat
          KeySchema:
            - AttributeName: GameSessionId
              KeyType: HASH
            - AttributeName: ConnectionId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  GameSessionDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: GameSessionId
          AttributeType: "S"
      KeySchema:
        - AttributeName: GameSessionId
          KeyType: "HASH"

  UserDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: "S"
        - AttributeName: RefreshToken
          AttributeType: "S"
      KeySchema:
        - AttributeName: UserId
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - IndexName: RefreshToken
          Projection:
            ProjectionType: ALL
          KeySchema: 
            - AttributeName: RefreshToken
              KeyType: "HASH"

  GlobalChatDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: ChatName
          AttributeType: "S"
        - AttributeName: Timestamp
          AttributeType: "N"
      KeySchema:
        - AttributeName: ChatName
          KeyType: "HASH"
        - AttributeName: Timestamp
          KeyType: "RANGE"

# Outputs:
#   api:
#     Value: !GetAtt WebSocketApi.ApiEndpoint
