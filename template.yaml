AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-app
  
  Sample SAM Template for sam-app

Globals:
  Function:
    Timeout: 5
    MemorySize: 128
    Runtime: provided.al2023
    Handler: bootstrap
    Architectures:
      - x86_64

Resources:
  SimpleWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: SimpleWebSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  WebSocketDevDeploy:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - WebSocketConnectRoute
      - WebSocketDisconnectRout
    Properties:
      ApiId: !Ref SimpleWebSocket

  WebSocketDevStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref SimpleWebSocket
      DeploymentId: !Ref WebSocketDevDeploy
      StageName: Dev
      DefaultRouteSettings:
        DetailedMetricsEnabled: true
        LoggingLevel: INFO
        DataTraceEnabled: false
        ThrottlingBurstLimit: 10
        ThrottlingRateLimit: 10
      AccessLogSettings:
        DestinationArn: arn:aws:logs:us-east-1:309114741156:log-group:apidebug:*
        Format: >-
          {"requestId":"$context.requestId", "ip": "$context.identity.sourceIp",
          "caller":"$context.identity.caller",
          "user":"$context.identity.user","requestTime":"$context.requestTime",
          "eventType":"$context.eventType","routeKey":"$context.routeKey",
          "status":"$context.status","connectionId":"$context.connectionId"}

  WebSocketConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleWebSocket
      RouteKey: $connect
      Target: !Sub 'integrations/${WebSocketConnectIntegration}'

  WebSocketConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleWebSocket
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketConnectFunction.Arn}/invocations'

  WebSocketConnectFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/ws-connect/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref StateDynamoDB
        - AmazonSQSFullAccess
      Environment:
        Variables:
          STATEDYNAMODB: !Ref StateDynamoDB
          QUEUE: !Ref WebSocketPostMessageQueue

  WebSocketConnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketConnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleWebSocket}/*/$connect'

  WebSocketPostMessageQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: WebSocketPostMessageQueue.fifo
      FifoQueue: true
      ContentBasedDeduplication: true

  WebSocketPostMessageFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/send-msg/
      Policies:
        - AWSLambdaSQSQueueExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleWebSocket}/*"
      Environment:
        Variables:
          API_ENDPOINT: !Sub "https://${SimpleWebSocket}.execute-api.${AWS::Region}.amazonaws.com/${WebSocketDevStage}"
      Events:
        WebSocketPostSQS:
          Type: SQS
          Properties:
            Queue: !GetAtt WebSocketPostMessageQueue.Arn

  WebSocketDisconnectRout:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleWebSocket
      RouteKey: $disconnect
      Target: !Sub 'integrations/${WebSocketDisconnectIntegration}'

  WebSocketDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleWebSocket
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketDisconnectFunction.Arn}/invocations'

  WebSocketDisconnectFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/ws-disconnect/
      Policies:
        - DynamoDBCrudPolicy: 
            TableName: !Ref StateDynamoDB
      Environment:
        Variables:
          STATEDYNAMODB: !Ref StateDynamoDB

  WebSocketDisconnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketDisconnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleWebSocket}/*/$disconnect'

  GameMoveFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/game-move/
      Policies:
        - DynamoDBCrudPolicy: 
            TableName: !Ref StateDynamoDB
      Environment:
        Variables:
          STATEDYNAMODB: !Ref StateDynamoDB
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /move
            Method: GET

  StateDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

# Outputs:
#   api:
#     Value: !GetAtt SimpleWebSocket.ApiEndpoint
