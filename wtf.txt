체스닷컴에서는 상대가 움직인 수를 따로 보여주기만 하는데
채팅을 보여줄 필요가 없을듯?

웹소켓 클라이언트에 메시지 보낼때 다보내게되는데... 그냥 분리할까?

이벤트 메시지 보내기 전에 업데이트하는게 맞긴한데 귀찮아

일단 서브도메인을 같이할수는 있다 그러면 아마 쿠키가 가긴 할거야



해야되는거
secure samesite cookie
cors
토큰 로테이션

넘긴거
config에러 처리 무시
게임시작 일단 수 두는 메시지(move)에 담아놓음

나아중에해볼거
dynamodb transactions
수많은 에러 핸들링 - 핸들러에서 에러 발생하면 메시지로 알려줘야함
잘못된 리퀘스트 오면 새로고침 시키기?
게임 데이터 저장
게임 데이터와 채팅 데이터는 굳이 동기 적으로 할필요 없다(진짜쓸모없네)


# MyWebSocketPermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     Action: lambda:InvokeFunction
  #     FunctionName: !Ref MyWebSocketFunction
  #     Principal: apigateway.amazonaws.com
  #     SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleChatWebSocket}/authorizers/${MyWebSocketAuthorizer}
  
  # MyWebSocketRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version": "2012-10-17"
  #       Statement:
  #         - Effect: Allow,
  #           Principal:
  #             Service:
  #               - apigateway.amazonaws.com
  #           Action: "sts:AssumeRole"
  #     Policies:
  #       - PolicyName: WebSocketInvokeLambda
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement: 
  #             - Effect: Allow
  #               Action: "lambda:InvokeFunction"
  #               Resource: !GetAtt MyWebSocketFunction.Arn

  # MyWebSocketAuthorizer:
  #   Type: AWS::ApiGatewayV2::Authorizer
  #   Properties:
  #     ApiId: !Ref SimpleChatWebSocket
  #     AuthorizerType: REQUEST
  #     AuthorizerCredentialsArn: !GetAtt MyWebSocketRole.Arn
  #     Name: LambdaAuthorizer
  #     AuthorizerUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyWebSocketFunction.Arn}/invocations
  #     IdentitySource:
  #       - route.request.header.Auth


    WebSocketConnectionDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: ConnectionId
          AttributeType: "S"
        - AttributeName: GameSessionId
          AttributeType: "S"
      KeySchema:
        - AttributeName: ConnectionId
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - IndexName: ByGameSessionId
          KeySchema:
            - AttributeName: GameSessionId
              KeyType: "HASH"
          Projection: 
            NonKeyAttributes: 
              - UserId
            ProjectionType: INCLUDE
      BillingMode: PAY_PER_REQUEST


	dbItem, _ := attributevalue.MarshalMap(game.WebSocketClient{
		ConnectionId:  req.RequestContext.ConnectionID,
		GameSessionId: gameSessionId,
		UserId:        "header-required",
	})
	_, err = dbClient.PutItem(ctx, &dynamodb.PutItemInput{
		TableName:           aws.String(os.Getenv("CONNECTION_DYNAMODB")),
		Item:                dbItem,
		ConditionExpression: aws.String("attribute_not_exists(id)"),
	})


disconnect
{Resource: 
Path: 
HTTPMethod: 
Headers:map[
    Host:omlo79fwk8.execute-api.us-east-1.amazonaws.com 
    X-Forwarded-For: 
    x-api-key: 
    x-restapi:
]
MultiValueHeaders:map[
    Host:[omlo79fwk8.execute-api.us-east-1.amazonaws.com] 
    X-Forwarded-For:[] 
    x-api-key:[] 
    x-restapi:[]
] 
QueryStringParameters:map[] 
MultiValueQueryStringParameters:map[] 
PathParameters:map[] 
StageVariables:map[] 
RequestContext:{
    AccountID: 
    ResourceID: 
    Stage:Dev 
    RequestID:V0IJFF-jIAMFmIQ= 
    Identity:{
        CognitoIdentityPoolID: 
        AccountID: 
        CognitoIdentityID: 
        Caller: 
        APIKey: 
        APIKeyID: 
        AccessKey: 
        SourceIP:220.70.42.35 
        CognitoAuthenticationType: 
        CognitoAuthenticationProvider: 
        UserArn: 
        UserAgent: 
        User:
    } 
    ResourcePath: 
    Authorizer:<nil> 
    HTTPMethod: 
    APIID:omlo79fwk8 
    ConnectedAt:1712424631834 
    ConnectionID:V0H8xfjDoAMCKFg= 
    DomainName:omlo79fwk8.execute-api.us-east-1.amazonaws.com 
    Error: 
    EventType:DISCONNECT 
    ExtendedRequestID:V0IJFF-jIAMFmIQ= 
    IntegrationLatency: 
    MessageDirection:IN 
    MessageID:<nil> 
    RequestTime:06/Apr/2024:17:31:50 +0000 
    RequestTimeEpoch:1712424710635 
    RouteKey:$disconnect 
    Status:
} 
Body: IsBase64Encoded:false}



websocket custom route
{
  "resource": "",
  "path": "",
  "headers": null,
  "multiValueHeaders": null,
  "queryStringParameters": null,
  "multiValueQueryStringParameters": null,
  "pathParameters": null,
  "stageVariables": null,
  "requestContext": {
    "accountId": "",
    "resourceId": "",
    "stage": "Dev",
    "requestId": "V3XXqGlhIAMFkww=",
    "identity": {
      "cognitoIdentityPoolId": "",
      "accountId": "",
      "cognitoIdentityId": "",
      "caller": "",
      "apiKey": "",
      "apiKeyId": "",
      "accessKey": "",
      "sourceIp": "220.70.42.35",
      "cognitoAuthenticationType": "",
      "cognitoAuthenticationProvider": "",
      "userArn": "",
      "userAgent": "",
      "user": ""
    },
    "resourcePath": "",
    "authorizer": null,
    "httpMethod": "",
    "apiId": "omlo79fwk8",
    "connectedAt": 1712509579334,
    "connectionId": "V3XV0cLFoAMCJAQ=",
    "domainName": "omlo79fwk8.execute-api.us-east-1.amazonaws.com",
    "error": "",
    "eventType": "MESSAGE",
    "extendedRequestId": "V3XXqGlhIAMFkww=",
    "integrationLatency": "",
    "messageDirection": "IN",
    "messageId": "V3XXqcP_oAMCJAQ=",
    "requestTime": "07/Apr/2024:17:06:31 +0000",
    "requestTimeEpoch": 1712509591122,
    "routeKey": "move",
    "status": ""
  },
  "body": "{\"action\":\"move\"}"
}

func gameEvent(ctx context.Context, msg game.GameMoveSQSRecord) error {
	// gamestartevent gamemoveevent gamefinishevent

	gameSession, err := game.GetGameSession(ctx, msg.GameSessionId)
	if err != nil {
		return err
	}

	if !gameSession.Game.Playing || gameSession.Game.PlayersId[gameSession.Game.Turn] != msg.UserId {
		return nil
	}

	if msg.Move.Pass {
		if gameSession.Game.Pass() {
			var c string
			if b, o := gameSession.Game.CountTerritory(); b > o {
				c = fmt.Sprint("Game over. ", gameSession.Game.PlayersId[0], " won.")
			} else if b < o {
				c = fmt.Sprint("Game over. ", gameSession.Game.PlayersId[1], " won.")
			} else {
				c = fmt.Sprint("Game over. Draw.")
			}
			gameSession.SendWebSocketMessage(ctx, game.ServerToClient{
				EventType: game.GAMEEVENT,
				Game:      gameSession.Game,
				Chat:      c,
			})
		} else {
			gameSession.SendWebSocketMessage(ctx, game.ServerToClient{
				EventType: game.GAMEEVENT,
				Game:      gameSession.Game,
			})
		}
	} else {
		finished, err := gameSession.Game.Move(msg.Move.Point)
		if err != nil {
			return err
		}
		gameSession.SendWebSocketMessage(ctx, game.ServerToClient{
			EventType: game.GAMEEVENT,
			Game:      gameSession.Game,
		})
		if finished {
			gameSession.SendWebSocketMessage(ctx, game.ServerToClient{
				EventType: game.GAMEEVENT,
				Game:      gameSession.Game,
				Chat:      fmt.Sprint("Game over. ", gameSession.Game.PlayersId[gameSession.Turn%2], " won."),
			})
		}
	}

	err = gameSession.UpdateGame(ctx)
	if err != nil {
		return err
	}

	return nil
}

      DefaultRouteSettings:
        DetailedMetricsEnabled: true
        LoggingLevel: INFO
        DataTraceEnabled: false
        ThrottlingBurstLimit: 10
        ThrottlingRateLimit: 10