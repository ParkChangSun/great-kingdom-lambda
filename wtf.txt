# MyWebSocketPermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     Action: lambda:InvokeFunction
  #     FunctionName: !Ref MyWebSocketFunction
  #     Principal: apigateway.amazonaws.com
  #     SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleChatWebSocket}/authorizers/${MyWebSocketAuthorizer}
  
  # MyWebSocketRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version": "2012-10-17"
  #       Statement:
  #         - Effect: Allow,
  #           Principal:
  #             Service:
  #               - apigateway.amazonaws.com
  #           Action: "sts:AssumeRole"
  #     Policies:
  #       - PolicyName: WebSocketInvokeLambda
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement: 
  #             - Effect: Allow
  #               Action: "lambda:InvokeFunction"
  #               Resource: !GetAtt MyWebSocketFunction.Arn

  # MyWebSocketAuthorizer:
  #   Type: AWS::ApiGatewayV2::Authorizer
  #   Properties:
  #     ApiId: !Ref SimpleChatWebSocket
  #     AuthorizerType: REQUEST
  #     AuthorizerCredentialsArn: !GetAtt MyWebSocketRole.Arn
  #     Name: LambdaAuthorizer
  #     AuthorizerUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyWebSocketFunction.Arn}/invocations
  #     IdentitySource:
  #       - route.request.header.Auth


    WebSocketConnectionDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: ConnectionId
          AttributeType: "S"
        - AttributeName: GameSessionId
          AttributeType: "S"
      KeySchema:
        - AttributeName: ConnectionId
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - IndexName: ByGameSessionId
          KeySchema:
            - AttributeName: GameSessionId
              KeyType: "HASH"
          Projection: 
            NonKeyAttributes: 
              - UserId
            ProjectionType: INCLUDE
      BillingMode: PAY_PER_REQUEST


	dbItem, _ := attributevalue.MarshalMap(game.WebSocketClient{
		ConnectionId:  req.RequestContext.ConnectionID,
		GameSessionId: gameSessionId,
		UserId:        "header-required",
	})
	_, err = dbClient.PutItem(ctx, &dynamodb.PutItemInput{
		TableName:           aws.String(os.Getenv("CONNECTION_DYNAMODB")),
		Item:                dbItem,
		ConditionExpression: aws.String("attribute_not_exists(id)"),
	})



{Resource: 
Path: 
HTTPMethod: 
Headers:map[
    Host:omlo79fwk8.execute-api.us-east-1.amazonaws.com 
    X-Forwarded-For: 
    x-api-key: 
    x-restapi:
]
MultiValueHeaders:map[
    Host:[omlo79fwk8.execute-api.us-east-1.amazonaws.com] 
    X-Forwarded-For:[] 
    x-api-key:[] 
    x-restapi:[]
] 
QueryStringParameters:map[] 
MultiValueQueryStringParameters:map[] 
PathParameters:map[] 
StageVariables:map[] 
RequestContext:{
    AccountID: 
    ResourceID: 
    Stage:Dev 
    RequestID:V0IJFF-jIAMFmIQ= 
    Identity:{
        CognitoIdentityPoolID: 
        AccountID: 
        CognitoIdentityID: 
        Caller: 
        APIKey: 
        APIKeyID: 
        AccessKey: 
        SourceIP:220.70.42.35 
        CognitoAuthenticationType: 
        CognitoAuthenticationProvider: 
        UserArn: 
        UserAgent: 
        User:
    } 
    ResourcePath: 
    Authorizer:<nil> 
    HTTPMethod: 
    APIID:omlo79fwk8 
    ConnectedAt:1712424631834 
    ConnectionID:V0H8xfjDoAMCKFg= 
    DomainName:omlo79fwk8.execute-api.us-east-1.amazonaws.com 
    Error: 
    EventType:DISCONNECT 
    ExtendedRequestID:V0IJFF-jIAMFmIQ= 
    IntegrationLatency: 
    MessageDirection:IN 
    MessageID:<nil> 
    RequestTime:06/Apr/2024:17:31:50 +0000 
    RequestTimeEpoch:1712424710635 
    RouteKey:$disconnect 
    Status:
} 
Body: IsBase64Encoded:false}